#define STEP1_PIN 8
#define DIR1_PIN 9
#define STEP2_PIN 10
#define DIR2_PIN 11
#define POT1_PIN A0    // Potentiometer 1 connected to A0
#define POT2_PIN A1    // Potentiometer 2 connected to A1
#define BUTTON_PIN 2   // Pushbutton connected to digital pin 2 (Dynamic Mode Override)
#define TOGGLE_PIN 3   // Toggle switch connected to pin 3 (Mode Selection)
#define LED_PIN 13     // LED connected to digital pin 13

int pot1Value = 0;        // Potentiometer 1 reading
int pot2Value = 0;        // Potentiometer 2 reading
float pot1Percent = 0;    // Potentiometer 1 percentage
float pot2Percent = 0;    // Potentiometer 2 percentage
float lastPot1Percent = 0; // Previous potentiometer 1 percentage
float lastPot2Percent = 0; // Previous potentiometer 2 percentage
int lastStateP1 = 0;      // Tracks the last state for P1: 0 = below 40%, 1 = 40-80%, 2 = above 80%
int lastStateP2 = 0;      // Tracks the last state for P2: 0 = below 40%, 1 = 40-80%, 2 = above 80%

const int stepsPer45Degrees = 50; // 400 steps/rev, 45° requires 50 steps
bool overrideMode = false;        // Tracks whether the button-activated override mode is active
bool overrideActionPerformed = false; // Tracks whether the override action has been performed
bool airBrakeMode = false;        // Tracks toggle switch state

bool p1ActionPerformed = false;   // Tracks if P1 action has been performed in Air Brake
bool p2ActionPerformed = false;   // Tracks if P2 action has been performed in Air Brake

void setup() {
  pinMode(STEP1_PIN, OUTPUT);
  pinMode(DIR1_PIN, OUTPUT);
  pinMode(STEP2_PIN, OUTPUT);
  pinMode(DIR2_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP); // Button with internal pull-up
  pinMode(TOGGLE_PIN, INPUT_PULLUP); // Toggle switch with internal pull-up
  pinMode(LED_PIN, OUTPUT);

  digitalWrite(STEP1_PIN, LOW);
  digitalWrite(DIR1_PIN, LOW);
  digitalWrite(STEP2_PIN, LOW);
  digitalWrite(DIR2_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  Serial.begin(9600); // For debugging
}

void loop() {
  // Read toggle switch state
  airBrakeMode = digitalRead(TOGGLE_PIN) == LOW; // Active LOW toggle switch

  if (airBrakeMode) {
    airBrakeLogic();
  } else {
    dynamicModeLogic();
  }

  delay(50); // Small delay for stability
}

void airBrakeLogic() {
  // Read potentiometer values
  pot1Value = analogRead(POT1_PIN);
  pot2Value = analogRead(POT2_PIN);
  pot1Percent = (pot1Value / 1023.0) * 100.0;
  pot2Percent = (pot2Value / 1023.0) * 100.0;

  // Debugging: Print potentiometer values
  Serial.print("Air Brake Mode - P1: ");
  Serial.print(pot1Percent);
  Serial.print("  P2: ");
  Serial.println(pot2Percent);

  if (pot1Percent > 15 && !p1ActionPerformed) {
    moveStepper(stepsPer45Degrees); // Move forward 45°
    digitalWrite(LED_PIN, HIGH);    // Turn LED on to indicate P1 action
    p1ActionPerformed = true;       // Mark action as performed
  } else if (pot1Percent <= 15) {
    p1ActionPerformed = false;      // Reset action flag when below threshold
    digitalWrite(LED_PIN, LOW);     // Turn LED off
  }

  if (pot2Percent >= 80 && !p2ActionPerformed) {
    moveStepper(-stepsPer45Degrees); // Move backward 45°
    p2ActionPerformed = true;        // Mark action as performed
  } else if (pot2Percent < 80) {
    p2ActionPerformed = false;       // Reset action flag when below threshold
  }
}

void dynamicModeLogic() {
  // Read button state
  bool buttonState = digitalRead(BUTTON_PIN) == LOW; // Active LOW button

  // Toggle override mode on button press
  static bool lastButtonState = false;
  if (buttonState && !lastButtonState) {
    overrideMode = !overrideMode; // Toggle override mode
    digitalWrite(LED_PIN, overrideMode ? HIGH : LOW); // Turn LED on or off
    overrideActionPerformed = false; // Reset override action flag
  }
  lastButtonState = buttonState;

  // Read potentiometer values
  pot1Value = analogRead(POT1_PIN);
  pot2Value = analogRead(POT2_PIN);
  pot1Percent = (pot1Value / 1023.0) * 100.0;
  pot2Percent = (pot2Value / 1023.0) * 100.0;

  // Debugging: Print potentiometer values
  Serial.print("Dynamic Mode - P1: ");
  Serial.print(pot1Percent);
  Serial.print("  P2: ");
  Serial.println(pot2Percent);

  if (overrideMode) {
    // Override functionality when LED is ON
    if (!overrideActionPerformed) {
      if (pot1Percent < 40) {
        moveStepper(2 * stepsPer45Degrees); // +90 degrees
      } else if (pot1Percent >= 40 && pot1Percent < 80) {
        moveStepper(stepsPer45Degrees); // +45 degrees
      } else {
        // No movement for P1 > 80%
      }
      overrideActionPerformed = true; // Mark override action as performed
    }

    // Only P2 is active after override mode
    handlePot2();
  } else {
    // Normal functionality
    handlePot1();
    handlePot2();
  }
}

void handlePot1() {
  // Handle Potentiometer 1 (Forward Motion)
  if (pot1Percent > lastPot1Percent) {
    // Check for state transitions
    if (pot1Percent >= 40 && pot1Percent < 80 && lastStateP1 != 1) {
      moveStepper(stepsPer45Degrees); // Move forward 45°
      lastStateP1 = 1;
      
      } else if(pot1Percent <= 40 && lastStateP1 == 1 ){
        lastStateP1 = 2;
      } else if (pot1Percent >= 80 && lastStateP1 != 2) {
      moveStepper(stepsPer45Degrees); // Move forward another 45°
      lastStateP1 = 2;
    }
  }
  lastPot1Percent = pot1Percent;
}

void handlePot2() {
  // Handle Potentiometer 2 (Reverse Motion)
  if (pot2Percent > lastPot2Percent) {
    // Check for state transitions
    if (pot2Percent >= 40 && pot2Percent < 80 && lastStateP2 != 1) {
      moveStepper(-stepsPer45Degrees); // Move backward 45°
      lastStateP2 = 1;
      
      } else if(pot2Percent <= 40 && lastStateP2 == 1 ){
        lastStateP2 = 2;
      } else if (pot2Percent >= 80 && lastStateP2 != 2) {
      moveStepper(-stepsPer45Degrees); // Move backward another 45°
      lastStateP2 = 2;
    }
  }
  lastPot2Percent = pot2Percent;
}

void moveStepper(int steps) {
  // Set direction for both motors based on the sign of 'steps'
  if (steps > 0) {
    digitalWrite(DIR1_PIN, HIGH);  // Forward direction for both motors
    digitalWrite(DIR2_PIN, HIGH);  // Forward direction for both motors
  } else {
    digitalWrite(DIR1_PIN, LOW);   // Backward direction for both motors
    digitalWrite(DIR2_PIN, LOW);   // Backward direction for both motors
    steps = -steps; // Convert steps to positive for the loop
  }

  // Generate pulses for the stepper motors
  for (int i = 0; i < steps; i++) {
    digitalWrite(STEP1_PIN, HIGH);
    digitalWrite(STEP2_PIN, HIGH);
    delayMicroseconds(500); // Pulse width (adjust for speed)
    digitalWrite(STEP1_PIN, LOW);
    digitalWrite(STEP2_PIN, LOW);
    delayMicroseconds(500);
  }
}
