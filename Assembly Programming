****Assume a user have entered their age in a program. The value is stored in register r16.
Write a program such that if the age is above 18, you store the value 1 in register r20, otherwise you
store the value 2 in r20. After the check, you shall just enter an infinite loop****

.org 0x0000
main:
 ldi r16, 18 ; Load the value 18 into r16 (Age threshold)
 ldi r20, 15 ; Load a test user's age into r20 (Assumed user's age)
 cp r20, r16 ; Compare r20 (user's age) with r16 (age threshold) brge above_or_equal_to_18 ; Branch if r20 is greater than or equal to 18
 ; Age is below 18
 ldi r20, 2 ; Store 2 in r20
 rjmp infinite_loop ; Jump to the infinite loop
above_or_equal_to_18:
 ; Age is greater than or equal to 18
 ldi r20, 1 ; Store 1 in r20
infinite_loop:
 rjmp infinite_loop ; Enter an infinite loop

****Write an assembly program that loads any values into register r16 and r17,
respectively. Add the two numbers and store the result in register r17. If the sum is an even number
red LED should Turn ON if the result is an odd number yellow LED should Turn ON. ( you can use
any available colors but they should be different from each other and write in your code comments
which is for what).****

.org 0x0000
main:
LDI r16,2 //r16=1
LDI r17,2 //r17=1
add r17,r16 //r17=r17+r16
andi r17,1 // Perform a bitwise AND with 1, result in r17
breq even // Branch if equal (if LSB is 0), jump to "even" label
LDI r17,0x01 // Load immediate: r17 = 0x01
OUT DDRB , r17 // It configures specific pins on the microcontroller as output pins.
OUT PORTB , r17 // Write the value in r17 to the PORTB register
rjmp main // Unconditional relative jump to "main" (loop)
even:
LDI r17, 0x02 // Load immediate: r17 = 0x02
OUT DDRB, r17 //It configures specific pins on the microcontroller as output pins.
OUT PORTB, r17 // Write the value in r17 to the PORTB register
rjmp main

****Write a code in which you initialize a value in PORTB and check whether the number is even
or odd. If the number even blinks alternative LEDs of PORTC with a delay. If the
number is odd then Blink LED at PORTC one after another from LSB to MSB.****
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
DDRB = 0xFF;
DDRC = 0xFF;
unsigned char z;
while (1)
{ for (z = 0; z <= 255; z++)
{PORTB = z;
if (z % 2 == 0)
{ PORTC = 0x01;
_delay_ms(100);
PORTC = 0x40;
_delay_ms(100);
PORTC = 0x02;
_delay_ms(100);
PORTC = 0x10;
_delay_ms(100);
PORTC = 0x08;
_delay_ms(100);
PORTC = 0x20;
_delay_ms(100);
PORTC = 0x04;
_delay_ms(100);
PORTC = 0x80;
_delay_ms(100);
}
else
{
PORTC = 0x01;
_delay_ms(1000);
PORTC = 0x02;
_delay_ms(1000);
PORTC = 0x04;
_delay_ms(1000);
PORTC = 0x08;
_delay_ms(1000);
PORTC = 0x10;
_delay_ms(1000);
PORTC = 0x20;
_delay_ms(1000);
PORTC = 0x40;
_delay_ms(1000);
PORTC = 0x80;
_delay_ms(1000);
}
}
}
return 0;
}

****Turn LEDs in a sequence using a push button (PORT of your choice and a minimum of 3
LEDS should be used) when reaching the last LED again the first LED should glow when the
button is pressed and the sequence should repeat in a constant loop.****

#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main(void) {
DDRB=0x00;
DDRC=0xFF;
while (1){
if (PINB & (1 << PINB0))
{_delay_ms(100);
PORTC = 0x02;
_delay_ms(100);
PORTC = 0x04;
_delay_ms(100);
}
else
{
PORTC = 0x00;
}
}
}


****Make 0 to 19 counter using 7-Segment. Show its Proteus simulation. Implement hardware as
well on a breadboard and get it checked.****
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
DDRA = 0xFF;
DDRB = 0xFF;
while(1){
PORTA= 0x3F ;
PORTB= 0x3F ;
_delay_ms(500);
PORTB= 0x06 ;
_delay_ms(500);
PORTB= 0x5B ;
_delay_ms(500);
PORTB= 0x4F ;
_delay_ms(500);
PORTB= 0x66 ;
_delay_ms(500);
PORTB= 0x6D ;
_delay_ms(500);
PORTB= 0x7D ;
_delay_ms(500);
PORTB= 0x07 ;
_delay_ms(500);
PORTB= 0x7F ;
_delay_ms(500);
PORTB= 0x6F ;
_delay_ms(500);
PORTA= 0x06 ;
PORTB= 0x3F ;
_delay_ms(500);
PORTB= 0x06 ;
_delay_ms(500);
PORTB= 0x5B ;
_delay_ms(500);
PORTB= 0x4F ;
_delay_ms(500);
PORTB= 0x66 ;
_delay_ms(500);
PORTB= 0x6D ;
_delay_ms(500);
PORTB= 0x7D ;
_delay_ms(500);
PORTB= 0x07 ;
_delay_ms(500);
PORTB= 0x7F ;
_delay_ms(500);
PORTB= 0x6F ;
_delay_ms(500);
}
}

****Write a code to interface the keypad with the Atmega Microcontroller and display the numbers
pressed on the keypad on the 7-Segment. Show its Proteus simulation. Implement hardware
as well on the breadboard and get it checked. ****

#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main (void)
{
DDRC = 0xF0;
DDRL = 0xFF;
while (1)
{
PORTC = 0x10;
if (PINC &(1<<PINC0))
{
PORTL = 0x06;
}
else if (PINC &(1<<PINC1))
{
PORTL = 0x5B;
}
else if (PINC &(1<<PINC2))
{
PORTL = 0x4F;
}
PORTC = 0x20;
if ((PINC &(1<<PINC0)))
{
PORTL = 0x66;
}
else if (PINC &(1<<PINC1))
{
PORTL = 0x6D;
}
else if (PINC &(1<<PINC2))
{
PORTL = 0x7D;
}
PORTA = 0x40;
if ((PINC &(1<<PINC0)))
{
PORTL = 0x07;
}
else if (PINC &(1<<PINC1))
{
PORTL = 0x7F;
}
else if (PINC &(1<<PINC2))
{
PORTL = 0x6F;
}
PORTC = 0x80;
if (PINC &(1<<PINC1))
{
PORTL = 0x3F;
}
}
}

****Interface LED with Keypad and Display your Roll No. with initials of your Name.****

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#define D0 eS_PORTC0
#define D1 eS_PORTC1
#define D2 eS_PORTC2
#define D3 eS_PORTC3
#define D4 eS_PORTC4
#define D5 eS_PORTC5
#define D6 eS_PORTC6
#define D7 eS_PORTC7
#define RS eS_PORTD0
#define EN eS_PORTD1
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
int main(void)
{
DDRC=0xff;
DDRD=0xff;
DDRL=0xf0;
Lcd8_Init();
while (1)
{
_delay_ms(10);
PORTL = 0x10; /////////
if (PINL &(1<<PINL0))
{ Lcd8_Write_Char('1') ; }
else if (PINL &(1<<PINL1))
{ Lcd8_Write_Char('2') ; }
else if (PINL &(1<<PINL2))
{ Lcd8_Write_Char('3') ; }
else if (PINL &(1<<PINL3))
{ Lcd8_Write_Char('A') ; }
PORTL = 0x20; //////////
if ((PINL &(1<<PINL0)))
{ Lcd8_Write_Char('4') ; }
else if (PINL &(1<<PINL1))
{ Lcd8_Write_Char('5') ; }
else if (PINL &(1<<PINL2))
{ Lcd8_Write_Char('6') ; }
else if (PINL &(1<<PINL3))
{ Lcd8_Write_Char('B') ; }
PORTL = 0x40; ///////////////
if ((PINL &(1<<PINL0)))
{ Lcd8_Write_Char('7') ; }
else if (PINL &(1<<PINL1))
{ Lcd8_Write_Char('8') ; }
else if (PINL &(1<<PINL2))
{ Lcd8_Write_Char('9') ; }
else if (PINL &(1<<PINL3))
{ Lcd8_Write_Char('C') ; }
PORTL = 0x80; ///////////////
if ((PINL &(1<<PINL0)))
{ Lcd8_Write_Char('*') ; }
else if (PINL &(1<<PINL1))
{ Lcd8_Write_Char('0') ; }
else if (PINL &(1<<PINL2))
{ Lcd8_Clear() ; }
else if (PINL &(1<<PINL3))
{ Lcd8_Write_Char('D') ; }
}
}

****● Create 1sec delay for both Timer0 and Timer1 to blink an LED as explained in the
example.
● 1024 pre-scalar.****

******CODE (TIMER 0): 
#define F_CPU 16000000UL // 16 MHz clock speed
#include <avr/io.h>
#include <util/delay.h>
int main()
{
char timerOverflowCount=0;
DDRD=0xFF; //configure PORTD as output
TCNT0=0x00;
TCCR0A= 0x00; // normal mode
TCCR0B = 0x05; // 1024 prescaler
while(1)
{
while ((TIFR0 & 0x01) == 0);//waits until Timer 0 overflows. This is how it creates a specific time delay.
TCNT0 = 0x00;
TIFR0=0x01; //clear timer1 overflow flag
timerOverflowCount++;
if (timerOverflowCount>=160)
{
PORTD ^= (1 << PD0); // toggles the led
timerOverflowCount=0;

*****CODE (TIMER 1): 
#define F_CPU 16000000UL // 16 MHz clock speed
#include <avr/io.h>
#include <util/delay.h>
int main()
{
DDRD=0xFF; ; //configure led as outpout
TCCR1B = (1<<CS10) | (1<<CS12); //set the pre-scalar as 1024
OCR1A = 1562; //100ms delay
TCNT1 = 0;
while(1)
{
while((TIFR1 & (1<<OCF1A)) == 0);// wait till the timer overflow flag is SET
PORTD ^= (1<< PD0);
TCNT1 = 0;
TIFR1 |= (1<<OCF1A) ; //clear timer1 overflow flag
}

****Control LED brightness to vary between 0 to a 45% using Fast PWM.****

#define F_CPU 16000000UL
#include "avr/io.h"
#include <util/delay.h>
int main (void)
{
DDRB=0x80;
unsigned char duty;
//set fast PWM mode with non-inverted output
TCCR0A|=(1<<WGM00)|(1<<WGM01)|(1<<COM0A1);
TCCR0B |=(1<<CS00);
while (1)
{
for(duty=0; duty<115; duty++)
{
OCR0A=duty; /increase the LED light intensity/
_delay_ms(10);
}
for(duty=115; duty>=0; duty--)
{
OCR0A=duty; /decrease the LED light intensity/
_delay_ms(10);
}}

****Write your First and last name in EEPROM register and then display that stored name
on LCD in proteus.****

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#define D0 eS_PORTC0
#define D1 eS_PORTC1
#define D2 eS_PORTC2
#define D3 eS_PORTC3
#define D4 eS_PORTC4
#define D5 eS_PORTC5
#define D6 eS_PORTC6
#define D7 eS_PORTC7
#define RS eS_PORTD0
#define EN eS_PORTD1
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
int main(void)
{
DDRC = 0xFF;
DDRD = 0xFF;
_delay_ms(10);
Lcd8_Init();
while (EECR & (1<<EEPE));
char a[] = "Muhammad Waqar";
for (int i=0; i<14; i++)
{
EEDR = a[i];
EEAR = 0x56 + i;
EECR |= (1<<EEMPE);
EECR |= (1<<EEPE);
while (EECR & (1<<EEPE));
char b[i];
b[i] = EEDR;
//EEAR = 0x56 + i;
//PORTC = b[i];
EECR |= (1<<EERE);
Lcd8_Write_Char(b[i]);}}

****Design a system consisting of 4 LEDS attached to a PORT that each led turns on when a push
button (No. of Buttons your choice) is pressed the serial number of LED that is turned ON
that number should be displayed on LCD. Write the code for the system and also show its
working on Proteus in your provided exam time.****

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#define D0 eS_PORTC0
#define D1 eS_PORTC1
#define D2 eS_PORTC2
#define D3 eS_PORTC3
#define D4 eS_PORTC4
#define D5 eS_PORTC5
#define D6 eS_PORTC6
#define D7 eS_PORTC7
#define RS eS_PORTD0
#define EN eS_PORTD1
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
int main(void){
DDRA=0xff;
DDRB=0x00;
DDRC=0xff;
DDRD=0xff;
Lcd8_Init();
while(1){
Lcd8_Clear();
if (PINB &(1<<PINB0))
{
PORTA=0x01;
Lcd8_Write_Char('1') ;
}
if (PINB &(1<<PINB1))
{
PORTA=0x02;
Lcd8_Write_Char('2') ;
}
 if (PINB &(1<<PINB2))
 {
 PORTA=0x04;
 Lcd8_Write_Char('3') ;
 }
 if (PINB &(1<<PINB3))
 {
 PORTA=0x08;
 Lcd8_Write_Char('4') ;
 }
}}

****Example: LCD Counter count value being transmitted from one
Microcontroller to a Receiver.****

Transmitter Code:
DDRD = 0xFF;
DDRC = 0xFF;
Lcd8_Init();
UCSR0B = (1<<TXEN0); //Enable Transmit
UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); //8 bit data
UBRR0 = 255; //Set UBRR to get specified Baud Rate
unsigned char count=0;
unsigned char temp[10];
while (1)
{
itoa(count,temp,10);
Lcd8_Set_Cursor(1,0);
Lcd8_Write_String("Transmitter:");
Lcd8_Set_Cursor(2,0);
Lcd8_Write_String(temp);
count++;
while(!(UCSR0A&(1<<UDRE0))); //wait until UDR0 is empty
UDR0 = count; //transmit the number
}
Receiver Code
DDRC = 0xFF;
DDRD = 0xFF;
Lcd8_Init();
UCSR0B = (1<<RXEN0); //Enable Receive
UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); //8 bit data
UBRR0 = 255; //Set UBRR to get specified Baud Rate
unsigned char C;
unsigned char count[10];
while (1)
{
while(!(UCSR0A & (1<<RXC0))); //wait for new data
C = UDR0;
itoa(C,count,10);
Lcd8_Set_Cursor(1,0);
Lcd8_Write_String("Receiver:");
Lcd8_Set_Cursor(2,0);
Lcd8_Write_String(count); // Display data on LCD
}

****Turn ON an LED while using two microcontrollers one work as transmitter with the Push Button
and other as receiver on which led is attached and it turns ON by receiving data from
transmitter with the help of push button.****

#include <avr/io.h>
int main(void)
{
while (1)
{
DDRA = 0x00;
UCSR0B = (1<<TXEN0); //Enable Transmit
UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); //8 bit data
UBRR0 = 255; //Set UBRR to get specified Baud Rate
unsigned char count;
while (1)
{
if (PINA & (1<<PINA0))
{
count = 1;
}
else
count = 0;
while(!(UCSR0A&(1<<UDRE0))); //wait until UDR0 is empty
UDR0 = count; //transmit the number
}
}
}
#include <avr/io.h>
int main(void)
{
while (1)
{
DDRA = 0xFF;
UCSR0B = (1<<RXEN0); //Enable Receive
UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); //8 bit data
UBRR0 = 255; //Set UBRR to get specified Baud Rate
unsigned char count;
while (1)
{while(!(UCSR0A & (1<<RXC0))); //wait for new data
count = UDR0;
if (count ==1)
PORTA =0x01 ;
}
}
}

****Design a system such that for each external interrupt generated it displays
on the LCD which interrupt is generated. All three interrupts.****

#define D0 eS_PORTA0
#define D1 eS_PORTA1
#define D2 eS_PORTA2
#define D3 eS_PORTA3
#define D4 eS_PORTA4
#define D5 eS_PORTA5
#define D6 eS_PORTA6
#define D7 eS_PORTA7
#define RS eS_PORTB0
#define EN eS_PORTB1
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd.h"
int main(void)
{
DDRA=0xFF;
DDRB=0xFF;
Lcd8_Init();
DDRD=0x00; // PORTD as input
PORTD |= (1 << PD0); // PD0 is now an input with pull-up enabled
PORTD |= (2 << PD1); // PD1 is now an input
PORTD |= (3 << PD2); //PD2 is now an input
EIMSK |= (1 << INT0); // Turns on INT0
EIMSK |= (1 << INT1);
EIMSK |= (1 << INT2);
MCUCR = 1<<ISC01 | 1<<ISC00; // Trigger INT0 on rising edge
sei(); // Enable Interrupts
while (1)
{
Lcd8_Clear();
Lcd8_Write_String("No int is en");
}
}
//Interrupt Service Routine for INT0
ISR(INT0_vect)
{
Lcd8_Clear();
Lcd8_Write_String("Int 0 is en");
_delay_ms(100);
}
ISR(INT1_vect)
{
Lcd8_Clear();
Lcd8_Write_String("Int 1 is en");
_delay_ms(100);
}
ISR(INT2_vect)
{
Lcd8_Clear();
Lcd8_Write_String("Int 2 is en");
_delay_ms(100);
}

****Design a digital thermometer using LM35 Temperature sensor and display
output on LCD.****

#ifndef F_CPU
#define F_CPU 16000000UL // 16 MHz clock speed
#endif
#define D0 eS_PORTD0
#define D1 eS_PORTD1
#define D2 eS_PORTD2
#define D3 eS_PORTD3
#define D4 eS_PORTC0
#define D5 eS_PORTC1
#define D6 eS_PORTC2
#define D7 eS_PORTC3
#define RS eS_PORTC6
#define EN eS_PORTC7
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
int main (void)
{
unsigned char A[10];
DDRF = 0x00;
DDRD = 0xFF;
DDRC = 0xFF;
ADCSRA = 0x87;//make ADC enable and select ck/128
ADMUX = 0xC0;// Vref, ADC0, right-justified
while (1){
ADCSRA |= (1<<ADSC);//start conversion
while((ADCSRA&(1<<ADIF))==0); //wait for end of conversion
ADCSRA |= (1<<ADIF); //clear the ADIF flag
unsigned int x= (ADCL|(ADCH<<8)/4);
Lcd8_Init();
itoa(x,A,10);
Lcd8_Set_Cursor(1,0);
Lcd8_Write_String("Temp: ");
Lcd8_Write_String(A);
_delay_ms(50);
}
}

****Control Motor speed and make it run on 20%, 40% ,60% and than 100%
using Fast PWM from Timer0.****
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
DDRC=0x00;
DDRB=0x80;
unsigned char duty;
//set fast PWM mode with non-inverted output
TCCR0A|=(1<<WGM00)|(1<<WGM01)|(1<<COM0A1);
TCCR0B |=(1<<CS00);
while (1)
{
if(PINC==0x00)
{
duty=0;
OCR0A=duty; //0%
}
if(PINC==0x01)
{
duty=51;
OCR0A=duty; //20%
}
if(PINC==0x02)
{
duty=102;
OCR0A=duty; //40%
}
if(PINC==0x04)
{
duty=153;
OCR0A=duty; //60%
}
if(PINC==0x08)
{
duty=255;
OCR0A=duty; //100%
}
}
}

****Type a simple onboard LED blinking code on esp32, with mobile app both connected with wifi****

// Load Wi-Fi library
#include <WiFi.h>
// Replace with your network credentials
const char* ssid = "SO-52A";
const char* password = "RRIA45201";
// Set web server port number to 80
WiFiServer server(80);
// Variable to store the HTTP request
String header;
// Auxiliar variables to store the current output state
String output26State = "off";
String output27State = "off";
// Assign output variables to GPIO pins
const int output26 = 26;
const int output27 = 27;
// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;
void setup() {
 Serial.begin(115200);
 // Initialize the output variables as outputs
 pinMode(output26, OUTPUT);
 pinMode(output27, OUTPUT);
 // Set outputs to LOW
 digitalWrite(output26, LOW);
 digitalWrite(output27, LOW);
 // Connect to Wi-Fi network with SSID and password
 Serial.print("Connecting to ");
 Serial.println(ssid);
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
delay(500);
 Serial.print(".");
 }
 // Print local IP address and start web server
 Serial.println("");
 Serial.println("WiFi connected.");
 Serial.println("IP address: ");
 Serial.println(WiFi.localIP());
 server.begin();
}
void loop(){
 WiFiClient client = server.available(); // Listen for incoming clients
 if (client) { // If a new client connects,
 currentTime = millis();
 previousTime = currentTime;
 Serial.println("New Client."); // print a message out in the
serial port
 String currentLine = ""; // make a String to hold
incoming data from the client
 while (client.connected() && currentTime - previousTime <= timeoutTime)
{ // loop while the client's connected
 currentTime = millis();
 if (client.available()) { // if there's bytes to read
from the client,
 char c = client.read(); // read a byte, then
 Serial.write(c); // print it out the serial
monitor
 header += c;
 if (c == '\n') { // if the byte is a newline
character
 // if the current line is blank, you got two newline characters
in a row.
 // that's the end of the client HTTP request, so send a response:
 if (currentLine.length() == 0) {
 // HTTP headers always start with a response code (e.g.
HTTP/1.1 200 OK)
 // and a content-type so the client knows what's coming, then a
blank line:
 client.println("HTTP/1.1 200 OK");
 client.println("Content-type:text/html");
 client.println("Connection: close");
 client.println();

 // turns the GPIOs on and off
 if (header.indexOf("GET /26/on") >= 0) {
 Serial.println("GPIO 26 on");
 output26State = "on";
 digitalWrite(output26, HIGH);
 } else if (header.indexOf("GET /26/off") >= 0) {
 Serial.println("GPIO 26 off");
 output26State = "off";
 digitalWrite(output26, LOW);
 } else if (header.indexOf("GET /27/on") >= 0) {
 Serial.println("GPIO 27 on");
 output27State = "on";
 digitalWrite(output27, HIGH);
 } else if (header.indexOf("GET /27/off") >= 0) {
 Serial.println("GPIO 27 off");
 output27State = "off";
 digitalWrite(output27, LOW);
// Display the HTML web page
 client.println("<!DOCTYPE html><html>");
 client.println("<head><meta name=\"viewport\"
content=\"width=device-width, initial-scale=1\">");
 client.println("<link rel=\"icon\" href=\"data:,\">");
 // CSS to style the on/off buttons
 // Feel free to change the background-color and font-size
attributes to fit your preferences
 client.println("<style>html { font-family: Helvetica; display:
inline-block; margin: 0px auto; text-align: center;}");
 client.println(".button { background-color: #4CAF50; border:
none; color: white; padding: 16px 40px;");
 client.println("text-decoration: none; font-size: 30px; margin:
2px; cursor: pointer;}");
 client.println(".button2 {background-color:
#555555;}</style></head>");

 // Web Page Heading
 client.println("<body><h1>ESP32 Web Server</h1>");

 // Display current state, and ON/OFF buttons for GPIO 26
 client.println("<p>GPIO 26 - State " + output26State + "</p>");
 // If the output26State is off, it displays the ON button
 if (output26State=="off") {
 client.println("<p><a href=\"/26/on\"><button
class=\"button\">ON</button></a></p>");
 } else {
 client.println("<p><a href=\"/26/off\"><button class=\"button
button2\">OFF</button></a></p>");
 }

 // Display current state, and ON/OFF buttons for GPIO 27
 client.println("<p>GPIO 27 - State " + output27State + "</p>");
 // If the output27State is off, it displays the ON button
if (output27State=="off") {
 client.println("<p><a href=\"/27/on\"><button
class=\"button\">ON</button></a></p>");
 } else {
 client.println("<p><a href=\"/27/off\"><button class=\"button
button2\">OFF</button></a></p>");
 }
 client.println("</body></html>");

 // The HTTP response ends with another blank line
 client.println();
 // Break out of the while loop
 break;
 } else { // if you got a newline, then clear currentLine
 currentLine = "";
 }
 } else if (c != '\r') { // if you got anything else but a carriage
return character,
 currentLine += c; // add it to the end of the currentLine
 }
 }
 }
 // Clear the header variable
 header = "";
 // Close the connection
 client.stop();
 Serial.println("Client disconnected.");
 Serial.println("");
 }
}

****To display the counting on TCNT register on LCD and also counting how many
times the TCNT counter is overflowing and showing it on LCD****
// Define the clock speed if not already defined
#ifndef F_CPU
#define F_CPU 16000000UL // 16 MHz clock speed
#endif
// Define LCD pin mappings
#define D0 eS_PORTD0
#define D1 eS_PORTD1
#define D2 eS_PORTD2
#define D3 eS_PORTD3
#define D4 eS_PORTC0
#define D5 eS_PORTC1
#define D6 eS_PORTC2
#define D7 eS_PORTC3
#define RS eS_PORTC6
#define EN eS_PORTC7
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h" // LCD library
// Global variables
int ToV; // Variable to store overflow count
int TCNT; // Variable to store Timer/Counter value
int Overflow=0; // Variable to store overflow occurrences
// Function to implement timer functionality
void timer()
{
int Value=0;
TCNT0 = 0x00; // Initialize Timer/Counter value
TCCR0A= 0x00; // Normal Mode Selected
TCCR0B = 0x05; // 1024 prescaler
while ((TIFR0&(1<<TOV0))==0)
{
Value=TCNT0; // Read Timer/Counter value
}; // Wait for Timer0 to overflow
TCCR0B = 0x00; // Stop the timer
TIFR0 = 1<<TOV0; // Clear the overflow flag
Overflow++; // Increment overflow count
TCNT=Value; // Store Timer/Counter value
ToV=Overflow; // Store overflow count
}
// Main function
int main()
{
// for LCD Outputs
DDRC=0xFF;
DDRD=0xFF;
// Initialize the LCD
Lcd8_Init();
char tov[10]; // Character array to store overflow count as a string
char Tcnt[10]; // Character array to store Timer/Counter value as a string
while(1)
{
// Display overflow count on the first line of the LCD
Lcd8_Set_Cursor(1,1);
Lcd8_Write_String("Overflow= ");
Lcd8_Set_Cursor(1,10);
itoa(ToV,tov,10); // Convert overflow count to a string as int is not
accepted by LCD
Lcd8_Write_String(tov); // Display overflow count on the LCD
// Display Timer/Counter value on the second line of the LCD
Lcd8_Set_Cursor(2,1);
Lcd8_Write_String("TCNT= ");
Lcd8_Set_Cursor(2,6);
itoa(TCNT,Tcnt,16); // Convert Timer/Counter value to a hexadecimal string
Lcd8_Write_String(Tcnt); // Display Timer/Counter value on the LCD
timer(); // Call the timer function
Lcd8_Clear(); // Clear the LCD for the next iteration
}
}

****To make a digital watch using timers on LCD.****
// Define the clock speed if not already defined
#ifndef F_CPU
#define F_CPU 16000000UL // 16 MHz clock speed
#endif
// Define LCD pin mappings
#define D0 eS_PORTD0
#define D1 eS_PORTD1
#define D2 eS_PORTD2
#define D3 eS_PORTD3
#define D4 eS_PORTC0
#define D5 eS_PORTC1
#define D6 eS_PORTC2
#define D7 eS_PORTC3
#define RS eS_PORTC6
#define EN eS_PORTC7
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
// Function to introduce a delay of 1 second using Timer1
void delay1s() {
TCNT1H = 0; // Initialize Timer/Counter1 High byte
TCNT1L = 0; // Initialize Timer/Counter1 Low byte
OCR1A = 15625; // Set the compare match value for 1-second delay
TCCR1A = 0; // Normal mode
TCCR1B = 0x05; // with 1024 prescaler
while ((TIFR1 & (1 << OCF1A)) == 0)
{ } // Wait until OCF1A is set
TCCR1A = 0; // Clear Timer/Counter1 Control Register A
TCCR1B = 0; // Stop Timer1
TIFR1 = 1 << OCF1A; // Clear the compare match flag
}
// Main function
int main() {
// Set data direction registers for Port C and Port D
DDRC = 0xFF;
DDRD = 0xFF;
// Integer declaration for timekeeping
int seconds = 0;
int minutes = 0;
int hours = 0;
// Character array declaration for displaying time on LCD
char S[10];
char M[10];
char H[10];
// Initialize the LCDLcd8_Init();
while (1) {
Lcd8_Write_String("Time: ");
// Hour Loop
for (hours = 0; hours < 24; hours++) {
Lcd8_Set_Cursor(1, 6);
itoa(hours, H, 10); // Integer to string
Lcd8_Write_String(H);
Lcd8_Set_Cursor(1, 9);
Lcd8_Write_Char(':');
// Minutes Loop
for (minutes = 0; minutes < 60; minutes++) {
Lcd8_Set_Cursor(1, 10);
itoa(minutes, M, 10); // Integer to string
Lcd8_Write_String(M);
Lcd8_Set_Cursor(1, 12);
Lcd8_Write_Char(':');
// Seconds Loop
for (seconds = 0; seconds < 60; seconds++) {
Lcd8_Set_Cursor(1, 14);
itoa(seconds, S, 10); // Integer to string
Lcd8_Write_String(S);
delay1s();
}
Lcd8_Clear();
Lcd8_Write_String("Time: ");
Lcd8_Set_Cursor(1, 6);
Lcd8_Write_String(H);
}
Lcd8_Clear();
Lcd8_Write_String("Time: ");
}
}
return 0;
}

